'''
Formats libsvm files into the desired input for the python
function. Calls Svm_predict to find the distance from each
datum in the file from the hyperplane generated by the model.
Prints to standard output. 
'''

import sys
import os.path
from svmutil import svm_load_model, svm_predict

#gets the necessary information from the input file
#and puts it in the correct format
def get_values(data): 
	if not os.path.exists(data):
                print "Exception: not a data file. Exiting program"
                exit(1)

	values = list()
	classifiers = list()
	for line in open(data,'r'):
		sample = line.split()
		classifier = int(sample.pop(0))
		vals = dict()
		for i in range(len(sample)):
			key_val = sample[i].split(":")
			vals[i] = float(key_val[1])
		values.append(vals)
		classifiers.append(classifier)
	return (classifiers, values)

def main():
	if len(sys.argv) != 3:
		print "Exception: incorrect number of arguments."

	model = svm_load_model(sys.argv[1])
	classifiers, values = get_values(sys.argv[2])
	p_labels, p_acc, p_vals = svm_predict(classifiers, values, model)
	for i in range(len(p_vals)):
		print "{0:.5f".format(p_vals[i][0])
	exit(1)

if __name__ == '__main__' :
	exit(main())
